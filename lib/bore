-- load config file to determine which blocks to ignore
local ignore = {}
local ignoreFile = "/etc/bore.ignore"
local config = fs.open(ignoreFile, "r")
if not config then 
  error("Unable to read "..ignoreFile)
  exit()
else
  -- add each block name to the ignore list
  for line in config.readLine do
    if line:len() ~= 0 then
      ignore[line] = true
    end
  end
end

-- record chest location
local chestPos = nil

function setChest(position)
  chestPos = position
end

-- check if block is wanted
local function isDesired(inspectFunc)
  local found, block = inspectFunc()
  return found and not ignore[block.name]
end

local function bruteDig(moveFunc, digFunc, inspectFunc)
  while not moveFunc() do
    blockFound, block = inspectFunc()
    if blockFound and block.name == "minecraft:bedrock" then
      return false
    end
    digFunc()
  end
  return true
end

local stack = {}
local stackI = -1

local function transferToChest()
  move.digTo(chestPos)

  for i = 2,16 do
    turtle.select(i)
    turtle.dropUp()
  end
end

local function debug()
  print("DEBUG")
  for _,node in ipairs(stack) do
    print(node.pos)
  end
end

-- Is there enough fuel for forward and backward trip
function enoughFuel()
  return turtle.getFuelLevel() < #stack + #stack - stackI
end

local function init(position)
  stack = {{
    pos=position, 
    todo={-location.Y()},
    shaft=true
  }}
  stackI = #stack
end

local function expand(minPosition, maxPosition, shaft)
  local position = location.getPos()
  local heading = location.getHeading()

  local node = {
    pos=position,
    todo={},
    shaft=shaft
  }

  local headings = {location.Y(), -location.Y()}
  for i = 0,3 do
    heading = location.turnLeft(heading)
    table.insert(headings, heading)
  end

  for _,heading in ipairs(headings) do
    local todo = position + heading
    if todo.x >= minPosition.x and todo.x <= maxPosition.x
      and todo.y >= minPosition.y and todo.y <= maxPosition.y 
      and todo.z >= minPosition.z and todo.z <= maxPosition.z
    then
      table.insert(node.todo, heading)
    end
  end

  table.insert(stack, node)
  stackI = stackI + 1
end 
    

function go(position, depth, minPosition, maxPosition)
  init(position)

  move.digTo(position)

  -- if we are unable to complete, it should be due to fuel
  if not continue(depth, minPosition, maxPosition) then
    print("Unable to go")
  end

  transferToChest()
end

function continue(depth, minPosition, maxPosition)
  if not chestPos then
    print("Unable to run without specifying the chest location")
    return false
  end

  while true do
    -- if we find something this round, switch to true
    local found = false

    -- exit criteria
    if enoughFuel() then
      print("Must return before running out of fuel")
      print("Fuel: "..turtle.getFuelLevel())
      print("Blocks: "..#stack)

      retreat()

      return false
    elseif not inventory.freeSlot() then
      print("Must return to make space for any new items")

      retreat()
      transferToChest()
      
      if enoughFuel() then
        print("Not enough fuel to make it there and back")
        print("Fuel: "..turtle.getFuelLevel())
        print("Blocks: "..#stack)

        return false
      end
      
      advance()
    end
    
    local headings = stack[#stack].todo
    -- check for useful block in all flat directions
    for h in function() return table.remove(headings) end do
      -- set proper inspect function
      local inspect = nil
      local movment = nil
      local dig = nil

      if h.y == 1 then
        inspect = turtle.inspectUp
        movement = bucket.up
        dig = turtle.digUp
      elseif h.y == -1 then
        inspect = turtle.inspectDown
        movement = bucket.down
        dig = turtle.digDown
      else
        inspect = turtle.inspect
        movement = bucket.forward
        dig = turtle.dig
        move.turnTo(h)
      end
      
      if isDesired(inspect) then
        -- push new position onto stack, and continue
        bruteDig(movement, dig, inspect)
        expand(minPosition, maxPosition)
        
        -- we need to continue the main loop when we
        -- push to the stack
        found = true
        break
      end
    end 

    
    -- if we find nothing valuable on all headings
    if not found then
      if stack[#stack].shaft then
        if #stack >= depth + 1 then
          -- break if we reach max depth
          break
        else
          -- continue down
          bruteDig(bucket.down, turtle.digDown, turtle.inspectDown)
          expand(minPosition, maxPosition, true)
        end
      else
        -- back up
        table.remove(stack)
        move.digTo(stack[#stack].pos)
        stackI = stackI - 1
      end
    end
  end

  print("Returning home")
  retreat()
  return true
end

-- go to beginning of stack
function retreat()
  while stackI ~= 1 do
    move.digTo(stack[stackI - 1].pos)
    stackI = stackI - 1
  end

  return true
end

-- go to end of stack
function advance()
  while stackI ~= #stack do
    move.digTo(stack[stackI + 1].pos)
    stackI = stackI + 1
  end

  return true
end
