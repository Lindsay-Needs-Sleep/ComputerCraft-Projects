--[[
  Wrapper for speaker to play notes.
--]]

local s = peripheral.find("speaker")
if not s then return end
s.setAttenuation(30)

-- frequency of first octave
local hz = {["C"] = 32.7032, ["C#"] = 34.6479,
      ["D"] = 36.7081, ["D#"] = 38.8909,
      ["E"] = 41.2035, ["F"] = 43.6536,
      ["F#"] = 46.2493, ["G"] = 48.9995,
      ["G#"] = 51.9130, ["A"] = 55,
      ["A#"] = 58.2705, ["B"] = 61.7354}

local playing = {}
for pitch,_ in pairs(hz) do
  playing[pitch] = {}
end

-- stack of channels
local freeChannels = {}
for i = 0,7 do
  table.insert(freeChannels, i)
end

-- set attenuation (negative db)
setAttenuation = s.setAttenuation

-- play note on channel from 0 to 7
function startNote(pitch, octave)
  if playing[pitch][octave] then return end
  
  channel = table.remove(freeChannels)
  
  if not channel then
    error("Already playing too many notes")
  end
  
  s.start(channel,
    hz[pitch] * math.pow(2, octave))
  
  playing[pitch][octave] = channel
end

function stopNote(pitch, octave)
  channel = playing[pitch][octave]  
  if channel then
    s.stop(channel)
    playing[pitch][octave] = nil
    table.insert(freeChannels, channel)
  end
end

function stopAll()
  s.shutdown()
  
  for pitch,_ in pairs(playing) do
    playing[pitch] = {}
  end
  
  freeChannels = {}
  for i = 0,7 do
    table.insert(freeChannels, i)
  end
end
