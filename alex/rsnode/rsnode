-- listen to server and act as a redstone emitter

local function executeInput(input, devices)
  -- output from function
  local output = ""
  
  -- first word is command
  local i = input:find(" ")
  local command
  if i == nil
  then
    command = input
  else
    command = input:sub(1, i-1)
  end
  
  -- next words are arguments
  local args = {}
  local argI = 1
  while i ~= nil
  do
    i2 = input:find(" ", i+1)
    if i2 ~= nil
    then
      args[argI] = input:sub(i+1,i2-1)
      argI = argI+1
    else
      args[argI] = input:sub(i+1)
    end
    i = i2
  end
  
  -- list command
  if command == "list"
  then
    output = output.."device:location\n"
    for device,location in pairs(devices)
    do
      output = output..device..":"..location.."\n"
    end
    return command, output
  
  -- set command
  elseif command == "set"
  then
    if #args ~= 2
    then
      output = "Usage: set <device> <on | off>\n"
      return command, output
    end
    
    
    local location = devices[args[1]]
    
    -- if device name is invalid
    if location == nil
    then
      output = args[1].." is not a known device".."\n"
      return command, output
    end
    
    -- if device is not local send message
    if type(location) == "number"
    then
      rednet.send(location, input)
      output = "Sent request to "..location.."\n"
      return command, output
    -- if device is here, set signal
    else
      local signal
      if args[2] == "on"
      then
        signal = true
      elseif args[2] == "off"
      then
        signal = false
      else
        output = "Invalid signal \""..args[2].."\" must be \"on\" or \"off\"\n"
        return command, output
      end
      rs.setOutput(location, signal)
      output = "Set "..args[1].." to "..args[2].."\n"
      return command, output
    end
  -- echo command
  elseif command == "echo"
  then
    -- print input except command
    output = input:sub(input:find(" ")+1)
    return command, output
    
  -- unknown command
  else
    output = "Unknown command: "..command.."\n"
    return command, output
  end
    
end

-- read configuration file
-- The config file should be arranged as
-- <side> <deviceName>
local confPath = shell.resolve("rsnode.conf")
local conf = fs.open(confPath, "r")

if conf == nil
then
  print("Unable to find rsserver.conf")
end

print("Be sure to have a network open using rednet.open(side)")

local devices = {}

print("Reading rsnode.conf...")
repeat
  local confLine = conf.readLine()
  if confLine ~= nil
  then
    local splitInd = confLine:find(" ")
    local location = confLine:sub(1, splitInd-1)
    local device = confLine:sub(splitInd+1)

    -- attempt to make location a number, if possible
    local loc = tonumber(location)
    if loc ~= nil then location = loc end
            
    devices[device] = location
    
    print("  "..device.." connected at "..location)
  end
until confLine == nil
conf.close()

-- listen for input from user
local input = ""
while true
do
  local event, e1, e2, e3, e4, e5 = os.pullEvent()
  
  -- recieve message from another node
  if event == "rednet_message"
  then
    -- print senderID
    print("Message from "..e1)
    -- print message
    print("  "..e2)
    local command, output = executeInput(e2, devices)
    print(output)    
    -- send echo message, if not echo command
    if command ~= echo
    then
      rednet.send(e1, "echo "..output)
    end

  -- get key pressed
  elseif event == "key"
  then
    -- ENTER
    if e1 == 28
    then
      write("\n")
      local command, output = executeInput(input,devices)
      print(output)
      input = ""
    end
  
  -- get char typed
  elseif event == "char"
  then
    input = input..e1
    write(e1)
  end
end
